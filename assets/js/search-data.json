{
  
    
        "post0": {
            "title": "Test Word",
            "content": "clutter is your enemy!  . Picture a blank page or a blank screen: every single element you add to that page or screen takes up cognitive load on the part of your audience—in other words, takes them brain power to process. Therefore, we want to take a discerning look at the visual elements that we allow into our communications. In general, identify anything that isn’t adding informative value—or isn’t adding enough informative value to make up for its presence—and remove those things. Identifying and eliminating such clutter is the focus of this chapter .",
            "url": "https://tianangthang7.github.io/blog/2021/05/02/test-word.html",
            "relUrl": "/2021/05/02/test-word.html",
            "date": " • May 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Load the Dataset",
            "content": "%%html &lt;style&gt;div.output_area pre {white-space: pre; word-wrap: normal;}.container { width:100% !important; }&lt;/style&gt; . from d2l import tensorflow as d2l import tensorflow as tf batch_size = 256 train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size) . Initializing Model Parameters . net = tf.keras.Sequential() net.add(tf.keras.layers.Flatten(input_shape=(28,28))) weight_initializer = tf.keras.initializers.RandomNormal(mean=0.0, stddev=0.01) net.add(tf.keras.layers.Dense(10,kernel_initializer=weight_initializer)) . Defining the Loss Function . loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True) . Optimization Algorithm . trainer = tf.keras.optimizers.SGD(learning_rate=.1) . Training . num_epochs = 10 d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-03-01T16:41:28.541956 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/ import inspect lines = inspect.getsource(d2l.train_ch3) print(lines) . def train_ch3(net, train_iter, test_iter, loss, num_epochs, updater): &#34;&#34;&#34;Train a model (defined in Chapter 3).&#34;&#34;&#34; animator = Animator(xlabel=&#39;epoch&#39;, xlim=[1, num_epochs], ylim=[0.3, 0.9], legend=[&#39;train loss&#39;, &#39;train acc&#39;, &#39;test acc&#39;]) for epoch in range(num_epochs): train_metrics = train_epoch_ch3(net, train_iter, loss, updater) test_acc = evaluate_accuracy(net, test_iter) animator.add(epoch + 1, train_metrics + (test_acc,)) train_loss, train_acc = train_metrics assert train_loss &lt; 0.5, train_loss assert train_acc &lt;= 1 and train_acc &gt; 0.7, train_acc assert test_acc &lt;= 1 and test_acc &gt; 0.7, test_acc .",
            "url": "https://tianangthang7.github.io/blog/2021/03/01/Softmax-Regression-Concise.html",
            "relUrl": "/2021/03/01/Softmax-Regression-Concise.html",
            "date": " • Mar 1, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Storytelling with Data",
            "content": "In this blog I will summarize the book Storytelling with data, which a complete guide for telling a story with data. This book includes 6 lessons: . Understand the context | Choose an appropriate visual display | Eliminate clutter | Focus attention where you want it | Think like a designer | Tell a story | Chapter 1: The importance of context . Befor you begin down the path of creating a data visualization or communication, attention and time should be paid to understanding the context for the need to communicate. . Exploratory vs explanatory alalysis . Exploratory analysis is what you do to understand the data and figure out what might be noteworthy or interesting to highlight to others. When we do exploratory analysis, it’s like hunting for pearls in oysters. Here, we focus on explanatory analysis and communication. . Who, what, and how . Who - Who you is your audience and how they perceive you? . What - What do you want your audience to know or do? . How - How can you use data to help make your point? . The 3&#8208;minute story &amp; Big Idea . The 3-miute story iss exactly that: if you had only three minutes to tell your audience what they need to know, what would you say? This is a great way to ensure you are cleear on and can articilate the story you want to tell. . Big idea . It must articulate your unique point of view; | It must convey what’s at stake; and | It must be a complete sentence. | Chapter 2: Choosing an effective visual . There are only a dozen different types of visual we will focus on this chapter. . Simple text . When you have just a number or two to share, simple text can be a great way to communicate. . Do this Not this . Table . If you need to communicate multiple different units of measure, this is also typically easier with a table than a graph. . . Borders should be used to improve the legibility of your table. Think about pushing them to the background by making them grey, or getting rid of them altogether. The data should be what stands out, not the borders. . Hearmap . A heartmap is a way to visualize data in tabular format, where in place of the numbers, you leverage colored cells that convey the relative magnitude of the numbers. . Scatterplot . Scatterplots can be useful for showing the relationship between two things. . Line graph . Line graphs are mots commonly used to plot continous data. It can show a single series of data, two series of data, or multiple series. . . Slopegraph . Slopegraphs can be useful when you have two periods or points of comparison and want to quickly show relative increases and decreases or differences across various categories between the two data points. . .",
            "url": "https://tianangthang7.github.io/blog/data%20visualization/2021/02/10/Storytelling-with-data.html",
            "relUrl": "/data%20visualization/2021/02/10/Storytelling-with-data.html",
            "date": " • Feb 10, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Softmax Regression",
            "content": "%%html &lt;style&gt;div.output_area pre {white-space: pre; word-wrap: normal;}.container { width:100% !important; }&lt;/style&gt; . Softmax function . The formular of Sofmax function is: $$a_i = frac{ exp(z_i)}{ sum_{j=1}^C exp(z_j)}, ~~ forall i = 1, 2, dots, C$$ . Then, we can assume that: $$P(y_k = i | mathbf{x}_k; mathbf{W}) = a_i$$ . The Loss Function . The loss function for a single data sample is : $$J( mathbf{W}; mathbf{x}_i, mathbf{y}_i) = - sum_{j=1}^C y_{ji} log(a_{ji})$$ . $$ = sum_{j = 1}^C y_{ji} log left( frac{ exp( mathbf{w}_j^T mathbf{x}_i)}{ sum_{k=1}^C exp( mathbf{w}_k^T mathbf{x}_i)} right) $$ Optimize the Loss Function . $$ begin{eqnarray} frac{ partial J_i( mathbf{W})}{ partial mathbf{w}_j} &amp;=&amp; -y_{ji} mathbf{x}_i + frac{ exp( mathbf{w}_j^T mathbf{x}_i)}{ sum_{k = 1}^C exp( mathbf{w}_k^T mathbf{x}_i)} mathbf{x}_i &amp;=&amp; -y_{ji} mathbf{x}_i + a_{ji} mathbf{x}_i = mathbf{x}_i (a_{ji} - y_{ji}) &amp;=&amp; e_{ji} mathbf{x}_{i} ~( text{where}~ e_{ji} = a_{ji} - y_{ji}) end{eqnarray}$$Then , $$ frac{ partial J_i( mathbf{W})}{ partial mathbf{W}} = mathbf{x}_i [e_{1i}, e_{2i}, dots, e_{Ci}] = mathbf{x}_i mathbf{e}_i^T$$ . Then, $$ frac{ partial J( mathbf{W})}{ partial mathbf{W}} = sum_{i=1}^N mathbf{x}_i mathbf{e}_i^T = mathbf{X} mathbf{E}^T$$ . The formular for update $ mathbf{W} is:$ . $$ mathbf{W} = mathbf{W} + eta mathbf{x}_{i}( mathbf{y}_i - mathbf{a}_i)^T$$ . Example with Fashion Mnist . Load the Dataset . from d2l import tensorflow as d2l import tensorflow as tf from IPython import display . def load_data_fashion_mnist(batch_size, resize=None): mnist_train, mnist_test = tf.keras.datasets.fashion_mnist.load_data() # Divide all numbers by 255 so that all pixel values are between # 0 and 1, add a batch dimension at the last. And cast label to int32 process = lambda X, y: (tf.expand_dims(X, axis=3) / 255, tf.cast(y, dtype=&#39;int32&#39;)) return ( tf.data.Dataset.from_tensor_slices(process(*mnist_train)).batch( batch_size).shuffle(len(mnist_train[0])), tf.data.Dataset.from_tensor_slices(process(*mnist_test)).batch( batch_size)) . train_iter, test_iter = load_data_fashion_mnist(32) for X, y in train_iter: print(X.shape, X.dtype, y.shape, y.dtype) break . (32, 28, 28, 1) &lt;dtype: &#39;float32&#39;&gt; (32,) &lt;dtype: &#39;int32&#39;&gt; . Initializing Model Parameters . num_inputs = 784 num_outputs = 10 W = tf.Variable(tf.random.normal(shape=(num_inputs, num_outputs), mean=0, stddev=0.01)) b = tf.Variable(tf.zeros(num_outputs)) . Defining the Softmax Operation . def softmax(X): X_exp = tf.exp(X) partition = tf.reduce_sum(X_exp, 1, keepdims=True) return X_exp / partition # The broadcasting mechanism is applied here . Defining the model . def net(X): return softmax(tf.matmul(tf.reshape(X, (-1, W.shape[0])), W) + b) . Defining the Loss Function . def cross_entropy(y_hat, y): return -tf.math.log(tf.boolean_mask( y_hat, tf.one_hot(y, depth=y_hat.shape[-1]))) . Training . def train_epoch_ch3(net, train_iter, loss, updater): #@save for X, y in train_iter: with tf.GradientTape() as tape: y_hat = net(X) l = loss(y_hat, y) updater(X.shape[0], tape.gradient(l, updater.params)) . def train_ch3(net, train_iter, test_iter, loss, num_epochs, updater): #@save for epoch in range(num_epochs): train_metrics = train_epoch_ch3(net, train_iter, loss, updater) test_acc = evaluate_accuracy(net, test_iter) animator.add(epoch + 1, train_metrics + (test_acc,)) train_loss, train_acc = train_metrics assert train_loss &lt; 0.5, train_loss assert train_acc &lt;= 1 and train_acc &gt; 0.7, train_acc assert test_acc &lt;= 1 and test_acc &gt; 0.7, test_acc . class Updater(): #@save &quot;&quot;&quot;For updating parameters using minibatch stochastic gradient descent.&quot;&quot;&quot; def __init__(self, params, lr): self.params = params self.lr = lr def __call__(self, batch_size, grads): d2l.sgd(self.params, grads, self.lr, batch_size) updater = Updater([W, b], lr=0.1) . num_epochs = 10 train_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, updater) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-02-24T23:06:42.744090 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/ def predict_ch3(net, test_iter, n=6): #@save &quot;&quot;&quot;Predict labels (defined in Chapter 3).&quot;&quot;&quot; for X, y in test_iter: break trues = d2l.get_fashion_mnist_labels(y) preds = d2l.get_fashion_mnist_labels(tf.argmax(net(X), axis=1)) titles = [true +&#39; n&#39; + pred for true, pred in zip(trues, preds)] d2l.show_images( tf.reshape(X[0:n], (n, 28, 28)), 1, n, titles=titles[0:n]) predict_ch3(net, test_iter) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-02-24T22:39:22.287187 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/",
            "url": "https://tianangthang7.github.io/blog/machine%20learning/softmax%20regression/2021/02/10/Softmax-Regression.html",
            "relUrl": "/machine%20learning/softmax%20regression/2021/02/10/Softmax-Regression.html",
            "date": " • Feb 10, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Multilayer Perceptrons",
            "content": "Multilayer Perceptrons is a truly deep netwok. This is a simplest deep network consist of multiple layers of neurons each fully connected to those in the layer below and those abuse. . Hidden Layers . . We can overcome the limitations of linear models and handle more general class of functions by incorporating one or more hiddn layers. . Activation Functions . In order to realize the potential of multilayer architectures, we need one more key ingredient: a nonlinear activation function . $$ begin{split} begin{aligned} mathbf{H} &amp; = sigma( mathbf{X} mathbf{W}^{(1)} + mathbf{b}^{(1)}), mathbf{O} &amp; = mathbf{H} mathbf{W}^{(2)} + mathbf{b}^{(2)}. end{aligned} end{split}$$ ReLU Function . $$ReLU(x) = max(x,0)$$ . [Text(0.5, 0, &#39;x&#39;), Text(0, 0.5, &#39;ReLU&#39;)] . Sigmoid Function . $$ operatorname{sigmoid}(x) = frac{1}{1 + exp(-x)}.$$ . y = tf.nn.sigmoid(x) sns.lineplot(x=x.numpy(), y=y.numpy()).set( xlabel=&#39;x&#39;, ylabel=&#39;Sigmoid&#39;) . [Text(0.5, 0, &#39;x&#39;), Text(0, 0.5, &#39;Sigmoid&#39;)] . Tanh Function . y = tf.nn.tanh(x) sns.lineplot(x=x.numpy(), y=y.numpy()).set( xlabel=&#39;x&#39;, ylabel=&#39;Tanh&#39;) . [Text(0.5, 0, &#39;x&#39;), Text(0, 0.5, &#39;Tanh&#39;)] . Implement Multilayer Percemtrons from Scartch . from d2l import tensorflow as d2l import tensorflow as tf batch_size = 256 train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size) . Initializing Parameters . num_inputs, num_outputs, num_hiddens = 784, 10, 256 W1 = tf.Variable(tf.random.normal( shape=(num_inputs, num_hiddens), mean=0, stddev=0.01)) b1 = tf.Variable(tf.zeros(num_hiddens)) W2 = tf.Variable(tf.random.normal( shape=(num_hiddens, num_outputs), mean=0, stddev=0.01)) b2 = tf.Variable(tf.random.normal([num_outputs], stddev=.01)) params = [W1, b1, W2, b2] . Activation Function . def relu(X): return tf.math.maximum(X,0) . Model . def net(X): X = tf.reshape(X, (-1, num_inputs)) H = relu(tf.matmul(X, W1) + b1) return tf.matmul(H, W2) + b2 . Loss Function . def loss(y_hat, y): return tf.losses.sparse_categorical_crossentropy( y, y_hat, from_logits=True) . Training . num_epochs, lr = 10, 0.1 updater = d2l.Updater([W1, W2, b1, b2], lr) d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, updater) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-03-04T22:56:23.947816 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/",
            "url": "https://tianangthang7.github.io/blog/machine%20learning/multilayer%20perceptrons/2021/02/10/Multilayer-Perceptrons.html",
            "relUrl": "/machine%20learning/multilayer%20perceptrons/2021/02/10/Multilayer-Perceptrons.html",
            "date": " • Feb 10, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Multilayer Perceptrons Concise",
            "content": "from d2l import tensorflow as d2l import tensorflow as tf . Model . net = tf.keras.models.Sequential([tf.keras.layers.Flatten(), tf.keras.layers.Dense(256,activation=&#39;relu&#39;), tf.keras.layers.Dense(10)]) . Training . batch_size, lr, num_epochs = 256, 0.1, 10 loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True) trainer = tf.keras.optimizers.SGD(learning_rate=lr) train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size) d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-03-04T23:04:53.572240 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/",
            "url": "https://tianangthang7.github.io/blog/machine%20learning/multilayer%20perceptrons/2021/02/10/Multilayer-Perceptrons-Concise.html",
            "relUrl": "/machine%20learning/multilayer%20perceptrons/2021/02/10/Multilayer-Perceptrons-Concise.html",
            "date": " • Feb 10, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Linear Regression",
            "content": "Regression is a set of methods for estimating the relationships between a outcome variable and features. . When our input consist of d features, we express our prediction $ hat{y}$ as $$ hat{y} = w_1 x_1 + ... + w_d x_d + b$$ . Collecting all features into a vector $ mathbf{x} in mathbb{R}^d$ and all weights into a vector $ mathbf{w} in mathbb{R}^d$, we can express our model compacity using a dot product: $$ hat{y} = mathbf{w}^T mathbf{x} +b$$ . The vector $ mathbb{x}$ corresponds to features of a single data example. To represent tho whole dataset we use $ mathbf{X} in mathbb{R}^{n times d}$. Here $ mathbf{X}$ contains one row for every example and one column for every feature. The predictions $ mathbf{ hat{y}} in mathbb{R}^n$ can be expressed as: $$ mathbf{ hat{y}} = mathbf{Xw} +b$$ . The Loss function quantifies the distance between the real and predicted value of the target. $$ (y - hat{y})^2 = | mathbf{y} - mathbf{X} mathbf{w} |^2 $$ . We need to find $ mathbf{w}$ to minimize the loss function. The analytic solution is: $$ ( mathbf{X}^T mathbf{X})^{-1} mathbf{X^T} mathbf{y}$$ . import tensorflow as tf import random def synthetic_data(w, b, num_examples): &quot;&quot;&quot;Generate y = Xw + b + noise.&quot;&quot;&quot; X = tf.zeros((num_examples, w.shape[0])) X += tf.random.normal(shape=X.shape) y = tf.matmul(X, tf.reshape(w, (-1, 1))) + b y += tf.random.normal(shape=y.shape, stddev=0.01) y = tf.reshape(y, (-1, 1)) return X, y true_w = tf.constant([2, -3.4]) true_b = 4.2 X, y = synthetic_data(true_w, true_b, 1000) . def solution(X, y): X = tf.concat([X,tf.ones(y.shape)],1) A = tf.linalg.inv(tf.matmul(tf.transpose(X),X)) B = tf.matmul(tf.transpose(X),y) return tf.matmul(A,B) . solution(X,y) . &lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy= array([[ 1.9995857], [-3.4000173], [ 4.2007246]], dtype=float32)&gt; .",
            "url": "https://tianangthang7.github.io/blog/machine%20learning/2021/02/10/Linear-Regression.html",
            "relUrl": "/machine%20learning/2021/02/10/Linear-Regression.html",
            "date": " • Feb 10, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Linear Regression with SGD",
            "content": "In case we cannot solve models analytically, we still train models effectively in practice. The algorithm optimize parameters in the direction that incrementally lowvers the loss function is called gradient descent. . We will often settle for sampling a random minibatch of examples every time we need to compute the update, a variant called minibatch stochastic gradient descent. . In each interation, we first randomly sample a minibatch $ beta$ consisting of a fixed number of training examples. We then compute the gradient of the average loss on the minibatch with regard to the model parameters. Finally, we multiply the gradient by a positive value $ eta$ and subtract the result from the current parameters values. . $$ mathbf{w} leftarrow mathbf{w} - frac{ eta}{| mathcal{B}|} sum_{i in mathcal{B}} partial_{ mathbf{w}} l^{(i)} mathbf{w}$$ . Generating the Dataset . import tensorflow as tf import random import matplotlib.pyplot as plt %matplotlib inline . def synthetic_data(w, b, num_examples): &quot;&quot;&quot;Generate y = Xw + b + noise.&quot;&quot;&quot; X = tf.zeros((num_examples, w.shape[0])) X += tf.random.normal(shape=X.shape) y = tf.matmul(X, tf.reshape(w, (-1, 1))) + b y += tf.random.normal(shape=y.shape, stddev=0.01) y = tf.reshape(y, (-1, 1)) return X, y true_w = tf.constant([2, -3.4]) true_b = 4.2 X, y = synthetic_data(true_w, true_b, 1000) . plt.scatter(x=X[:,0].numpy(),y=y[:,0].numpy()) . &lt;matplotlib.collections.PathCollection at 0x7fafb0152d30&gt; . Reading the Dataset . def data_iter(batch_size, features, labels): num_examples = len(features) indices = list(range(num_examples)) # The examples are read at random, in no particular order random.shuffle(indices) for i in range(0, num_examples, batch_size): j = tf.constant(indices[i: min(i + batch_size, num_examples)]) yield tf.gather(features, j), tf.gather(labels, j) . Initalizing the Parameters . w = tf.Variable(tf.random.normal(shape=(3,1), mean=0, stddev=0.01),trainable=True) . Defining the Model . def linreg(X,w): return tf.matmul(X,w) . Defining the Loss Function . def squared_loss(y_hat,y): return (y_hat-y)**2/2 . Defining the Optimizatioin Algorithm . def sgd(w, grad, lr, batch_sizze): w.assign_sub(lr*grad/batch_sizze) . Training . X=tf.concat([X,tf.ones(y.shape)],1) . lr = 0.03 num_epochs = 10 net = linreg loss = squared_loss batch_size = 100 for epoch in range(num_epochs): for X_, y_ in data_iter(batch_size, X, y): with tf.GradientTape() as g: l = loss(net(X_, w), y_) # Minibatch loss in `X` and `y` # Compute gradient on l with respect to [`w`, `b`] dw = g.gradient(l, w) # Update parameters using their gradient sgd(w, dw, lr, batch_size) train_l = loss(net(X, w), y) print(f&#39;epoch {epoch + 1}, loss {float(tf.reduce_mean(train_l)):f}&#39;) . epoch 1, loss 9.072795 epoch 2, loss 4.911858 epoch 3, loss 2.659815 epoch 4, loss 1.440408 epoch 5, loss 0.780151 epoch 6, loss 0.422553 epoch 7, loss 0.228911 epoch 8, loss 0.124030 epoch 9, loss 0.067223 epoch 10, loss 0.036443 . w . &lt;tf.Variable &#39;Variable:0&#39; shape=(3, 1) dtype=float32, numpy= array([[ 1.9193369], [-3.2431753], [ 3.9959464]], dtype=float32)&gt; .",
            "url": "https://tianangthang7.github.io/blog/machine%20learning/2021/02/10/Linear-Regression-SGD.html",
            "relUrl": "/machine%20learning/2021/02/10/Linear-Regression-SGD.html",
            "date": " • Feb 10, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Linear Regression Concise with Tensorflow",
            "content": "Generate the Dataset . import tensorflow as tf import random import matplotlib.pyplot as plt %matplotlib inline . def synthetic_data(w, b, num_examples): &quot;&quot;&quot;Generate y = Xw + b + noise.&quot;&quot;&quot; X = tf.zeros((num_examples, w.shape[0])) X += tf.random.normal(shape=X.shape) y = tf.matmul(X, tf.reshape(w, (-1, 1))) + b y += tf.random.normal(shape=y.shape, stddev=0.01) y = tf.reshape(y, (-1, 1)) return X, y true_w = tf.constant([2, -3.4]) true_b = 4.2 X, y = synthetic_data(true_w, true_b, 1000) . Reading the Dataset . def load_array(data_arrays, batch_size, is_train=True): #@save &quot;&quot;&quot;Construct a TensorFlow data iterator.&quot;&quot;&quot; dataset = tf.data.Dataset.from_tensor_slices(data_arrays) if is_train: dataset = dataset.shuffle(buffer_size=1000) dataset = dataset.batch(batch_size) return dataset batch_size = 10 data_iter = load_array((X, y), batch_size) . Defining the Model &amp; Initializing Parameters . initializer = tf.initializers.RandomNormal(stddev=0.01) net = tf.keras.Sequential() net.add(tf.keras.layers.Dense(1, kernel_initializer=initializer)) . Defining the Loss Function . loss = tf.keras.losses.MeanSquaredError() loss = tf.keras.losses.Huber() . Defining the Optimization Algorithm . trainer = tf.keras.optimizers.SGD(learning_rate=0.03) . Training . num_epochs = 3 for epoch in range(num_epochs): for X_,y_ in data_iter: with tf.GradientTape() as tape: l = loss(y_,net(X_, training = True)) grads = tape.gradient(l,net.trainable_variables) trainer.apply_gradients(zip(grads,net.trainable_variables)) l = loss(net(X), y) print(f&#39;epoch {epoch +1}, loss {l:f}&#39;) . epoch 1, loss 2.276382 epoch 2, loss 0.314810 epoch 3, loss 0.000611 . net.get_weights() . [array([[ 1.9885834], [-3.379021 ]], dtype=float32), array([4.1781187], dtype=float32)] . a = tf.reshape(tf.range(3), (3, 1)) b = tf.reshape(tf.range(2), (1, 2)) a, b . (&lt;tf.Tensor: shape=(3, 1), dtype=int32, numpy= array([[0], [1], [2]], dtype=int32)&gt;, &lt;tf.Tensor: shape=(1, 2), dtype=int32, numpy=array([[0, 1]], dtype=int32)&gt;) .",
            "url": "https://tianangthang7.github.io/blog/machine%20learning/tensorflow/2021/02/10/Linear-Regression-Concise.html",
            "relUrl": "/machine%20learning/tensorflow/2021/02/10/Linear-Regression-Concise.html",
            "date": " • Feb 10, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tianangthang7.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tianangthang7.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tianangthang7.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tianangthang7.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}